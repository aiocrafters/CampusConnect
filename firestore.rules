/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict school-based ownership model for the CampusConnect application.
 * All data is nested under /schools/{schoolId} and its subcollections, ensuring isolation between schools.
 *
 * Data Structure:
 * - /schools/{schoolId}: Contains school-level information.
 * - /schools/{schoolId}/students/{studentId}: Contains student data for a specific school.
 * - /schools/{schoolId}/students/{studentId}/timeline/{eventId}: Student timeline events.
 * - /schools/{schoolId}/classSections/{classSectionId}: Class sections within a school.
 * - /schools/{schoolId}/designations/{designationId}: Staff designations.
 * - /schools/{schoolId}/departments/{departmentId}: Staff departments.
 * - /schools/{schoolId}/exams/{examId}: Exams conducted within a school.
 * - /schools/{schoolId}/masterSubjects/{masterSubjectId}: Master subjects offered at a school.
 * - /schools/{schoolId}/masterClasses/{masterClassId}: Master classes offered at a school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Subjects within a specific exam.
 * - /schools/{schoolId}/performanceRecords/{performanceRecordId}: Student performance records.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: Queries raised by class in-charges.
 * - /schools/{schoolId}/promotions/{promotionId}: Promotion records.
 * - /schools/{schoolId}/staff/{staffId}: Staff information for a specific school.
 * - /unique_identifiers/{identifier}: Enforces uniqueness for specific fields across all schools.
 *
 * Key Security Decisions:
 * - All data access is restricted to authenticated users. Specific role-based access is not yet enforced but
 *   can be implemented by adding a 'members' map to the /schools/{schoolId} document to specify the roles.
 * - All write operations MUST be explicitly authorized via a helper function.
 * - 'list' operations are only allowed within the school's data scope.
 * - The ruleset leverages denormalization of `schoolId` in subcollections to simplify security rules and improve performance.
 *
 * Denormalization for Authorization:
 * The `schoolId` is present in every document within a `/schools/{schoolId}` subcollection. This ensures that
 * rules can validate the school context without requiring extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the userId and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership and verifies resource existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces basic request validation for schoolId to avoid complex rule conditions.
     * @path /schools/{schoolId}/...
     * @allow N/A
     * @deny N/A
     * @principle Enforces a multi-tenant data model where access is determined by school ID.
     */
    function isValidSchoolId(schoolId) {
        return request.resource.data.schoolId == schoolId;
    }
    /**
     * @description Rules for the /schools collection.
     * @path /schools/{schoolId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isOwner(schoolId); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only the school admin (owner) can create, update, or delete a school.
     */
    match /schools/{schoolId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/students collection.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage student information within their school context.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId) && request.resource.data.id == studentId;
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/timeline collection.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage timeline events within their school context.
     */
     match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isValidSchoolId(schoolId);
        allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
        allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
     }

    /**
     * @description Rules for the /schools/{schoolId}/classSections collection.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage class sections within their school context.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/designations collection.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage staff designations within their school context.
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/departments collection.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage departments within their school context.
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams collection.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage exams within their school context.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

     /**
      * @description Rules for the /schools/{schoolId}/masterSubjects collection.
      * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
      * @allow get: if isSignedIn(); (read)
      * @allow create: if isSignedIn(); (create)
      * @deny get: if false;
      * @deny create: if false;
      * @deny update: if false;
      * @deny delete: if false;
      * @principle Enforces school-based data ownership. Only authenticated users can manage master subjects within their school context.
      */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isValidSchoolId(schoolId);
        allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
        allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterClasses collection.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage master classes within their school context.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams/{examId}/subjects collection.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage subjects within their school context.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/performanceRecords collection.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage performance records within their school context.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/classInchargeQueries collection.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage class incharge queries within their school context.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools/{schoolId}/promotions collection.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage promotion records within their school context.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /unique_identifiers collection.
     * @path /unique_identifiers/{identifier}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces uniqueness. Only authenticated users can create unique identifiers, typically used to prevent duplicates across schools.
     */
    match /unique_identifiers/{identifier} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isValidSchoolId(request.resource.data.schoolId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /schools/{schoolId}/staff collection.
     * @path /schools/{schoolId}/staff/{staffId}
     * @allow get: if isSignedIn(); (read)
     * @allow create: if isSignedIn(); (create)
     * @deny get: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Enforces school-based data ownership. Only authenticated users can manage staff information within their school context.
     */
    match /schools/{schoolId}/staff/{staffId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isValidSchoolId(schoolId);
      allow update: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
      allow delete: if isSignedIn() && isValidSchoolId(schoolId) && resource != null;
    }
  }
}