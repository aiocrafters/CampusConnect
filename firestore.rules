/**
 * @description This ruleset enforces a strict school-based ownership model for the CampusConnect platform.
 * All data is nested under /schools/{schoolId}, ensuring data isolation and simplified access control.
 * Each subcollection document also includes a denormalized 'schoolId' field for authorization independence.
 *
 * Data Structure:
 * - /schools/{schoolId}: Contains school information.
 * - /schools/{schoolId}/students/{studentId}: Contains student information.
 * - /schools/{schoolId}/classSections/{classSectionId}: Contains class section information.
 * - /schools/{schoolId}/teachers/{teacherId}: Contains teacher information.
 * - /schools/{schoolId}/exams/{examId}: Contains exam information.
 * - /schools/{schoolId}/masterSubjects/{masterSubjectId}: Contains master subject information.
 * - /schools/{schoolId}/masterClasses/{masterClassId}: Contains master class information.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Contains subject information.
 * - /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}: Contains student performance records.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: Contains class in-charge queries.
 *
 * Key Security Decisions:
 * - Only authenticated users can access data.
 * - Data access is restricted to the school level. Users can only access data within their associated school.
 * - The rules do not enforce any schema validation beyond ownership and relationship integrity.
 * - List operations are allowed only within a school's scope.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the schools collection.
     * @path /schools/{schoolId}
     * @allow (create) - An authenticated user can create a school document if they are creating their school (schoolId matches auth UID).
     * @allow (get, list) - All authenticated users can read school documents.
     * @allow (update, delete) - Only the owner (creator) of the school can update or delete the school document.
     * @deny (create) - An unauthenticated user cannot create a school document.
     * @deny (update) - A user cannot update a school if they are not the school's owner.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the students collection within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) - An authenticated user can create a student document within a school.
     * @allow (get, list) - All authenticated users can read student documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the student can update or delete the student document.
     * @deny (create) - An unauthenticated user cannot create a student document.
     * @deny (update) - A user cannot update a student if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

       function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the classSections collection within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) - An authenticated user can create a classSection document within a school.
     * @allow (get, list) - All authenticated users can read classSection documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the classSection can update or delete the classSection document.
     * @deny (create) - An unauthenticated user cannot create a classSection document.
     * @deny (update) - A user cannot update a classSection if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the teachers collection within a school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (create) - An authenticated user can create a teacher document within a school.
     * @allow (get, list) - All authenticated users can read teacher documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the teacher can update or delete the teacher document.
     * @deny (create) - An unauthenticated user cannot create a teacher document.
     * @deny (update) - A user cannot update a teacher if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the exams collection within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) - An authenticated user can create an exam document within a school.
     * @allow (get, list) - All authenticated users can read exam documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the exam can update or delete the exam document.
     * @deny (create) - An unauthenticated user cannot create an exam document.
     * @deny (update) - A user cannot update an exam if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/exams/{examId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the subjects collection within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) - An authenticated user can create a subject document within an exam.
     * @allow (get, list) - All authenticated users can read subject documents within an exam.
     * @allow (update, delete) - Only the owner (creator) of the subject can update or delete the subject document.
     * @deny (create) - An unauthenticated user cannot create a subject document.
     * @deny (update) - A user cannot update a subject if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the performanceRecords collection within a student.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow (create) - An authenticated user can create a performanceRecord document within a student.
     * @allow (get, list) - All authenticated users can read performanceRecord documents within a student.
     * @allow (update, delete) - Only the owner (creator) of the performanceRecord can update or delete the performanceRecord document.
     * @deny (create) - An unauthenticated user cannot create a performanceRecord document.
     * @deny (update) - A user cannot update a performanceRecord if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the classInchargeQueries collection within a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) - An authenticated user can create a classInchargeQuery document within a student.
     * @allow (get, list) - All authenticated users can read classInchargeQuery documents within a student.
     * @allow (update, delete) - Only the owner (creator) of the classInchargeQuery can update or delete the classInchargeQuery document.
     * @deny (create) - An unauthenticated user cannot create a classInchargeQuery document.
     * @deny (update) - A user cannot update a classInchargeQuery if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }
    /**
     * @description Controls access to the masterSubjects collection within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (create) - An authenticated user can create a masterSubject document within a school.
     * @allow (get, list) - All authenticated users can read masterSubject documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the masterSubject can update or delete the masterSubject document.
     * @deny (create) - An unauthenticated user cannot create a masterSubject document.
     * @deny (update) - A user cannot update a masterSubject if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
     match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Controls access to the masterClasses collection within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (create) - An authenticated user can create a masterClass document within a school.
     * @allow (get, list) - All authenticated users can read masterClass documents within a school.
     * @allow (update, delete) - Only the owner (creator) of the masterClass can update or delete the masterClass document.
     * @deny (create) - An unauthenticated user cannot create a masterClass document.
     * @deny (update) - A user cannot update a masterClass if they are not the school's owner.
     * @principle Enforces document ownership for writes and restricts access to the school.
     */
     match /schools/{schoolId}/masterClasses/{masterClassId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == schoolId;
      }

      function isSchoolContextValid(schoolId) {
         return request.resource.data.schoolId == schoolId;
       }

      function isExistingOwner(schoolId) {
        return isSignedIn() && isOwner(schoolId) && resource != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isSchoolContextValid(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }
  }
}