/**
 * @file Firebase Security Rules for CampusConnect Firestore Database
 *
 * Core Philosophy:
 * This ruleset enforces a strict school-ownership model, ensuring data isolation between different schools within the CampusConnect platform. All data access is controlled based on the authenticated user's identity and their association with a specific school, determined by the `schoolId` in the Firestore path and within documents.
 *
 * Data Structure:
 * The database is structured hierarchically with `/schools/{schoolId}` as the root for each school's data. Subcollections under each school (e.g., `/schools/{schoolId}/students/{studentId}`) contain school-specific entities.  `schoolId` is consistently denormalized into documents within these subcollections to avoid needing `get()` calls for authorization checks.
 *
 * Key Security Decisions:
 * - Access to school data is restricted to authenticated users who are implicitly associated with the school based on their UID.
 * - Rules are designed to prevent cross-school data access.
 * - Data validation is limited to essential fields for maintaining relational integrity and authorization.
 *
 * Denormalization for Authorization:
 * The `schoolId` field is denormalized into every subcollection document to enable simple, performant authorization checks without requiring additional reads.  For example, a rule on `/schools/{schoolId}/students/{studentId}` can directly check `resource.data.schoolId == schoolId` instead of needing to read the parent `/schools/{schoolId}` document.
 *
 * Structural Segregation:
 * Each collection is dedicated to a specific entity type (e.g., students, staff, classSections), ensuring that all documents within a collection share the same security requirements. This simplifies security rules and prevents accidental exposure of sensitive data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for the /schools collection. Allows authenticated users to read school documents. Requires that the schoolId matches the document ID.
     * @path /schools/{schoolId}
     * @allow (get) User with any auth can read the school document.
     * @deny (create, update, delete) No one can create, update, or delete school documents directly.
     * @principle Path-based ownership.
     */
    match /schools/{schoolId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /schools/{schoolId}/staff/{staffId} collection. Allows authenticated users to read staff documents within a school.
     * @path /schools/{schoolId}/staff/{staffId}
     * @allow (get, list) Authenticated user can read staff document in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete staff document in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/staff/{staffId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId} collection. Allows authenticated users to read student documents within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get, list) Authenticated user can read student document in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete student document in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId}/timeline/{eventId} collection. Allows authenticated users to read student timeline event documents.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (get, list) Authenticated user can read student timeline events.
     * @allow (create, update, delete) Authenticated user can create, update, delete student timeline events.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/classSections/{classSectionId} collection. Allows authenticated users to read class section documents within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get, list) Authenticated user can read class section documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete class section documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/designations/{designationId} collection. Allows authenticated users to read designation documents within a school.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (get, list) Authenticated user can read designation documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete designation documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/departments/{departmentId} collection. Allows authenticated users to read department documents within a school.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow (get, list) Authenticated user can read department documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete department documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/exams/{examId} collection. Allows authenticated users to read exam documents within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get, list) Authenticated user can read exam documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete exam documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/masterSubjects/{masterSubjectId} collection. Allows authenticated users to read master subject documents within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (get, list) Authenticated user can read master subject documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete master subject documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

     /**
     * @description Rule for the /schools/{schoolId}/masterClasses/{masterClassId} collection. Allows authenticated users to read master class documents within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (get, list) Authenticated user can read master class documents in school.
     * @allow (create, update, delete) Authenticated user can create, update, delete master class documents in school.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/exams/{examId}/subjects/{subjectId} collection. Allows authenticated users to read subject documents within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get, list) Authenticated user can read subject documents in exam.
     * @allow (create, update, delete) Authenticated user can create, update, delete subject documents in exam.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/performanceRecords/{performanceRecordId} collection. Allows authenticated users to read performance record documents.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (get, list) Authenticated user can read performance record documents.
     * @allow (create, update, delete) Authenticated user can create, update, delete performance record documents.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} collection. Allows authenticated users to read class incharge query documents.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get, list) Authenticated user can read class incharge query documents.
     * @allow (create, update, delete) Authenticated user can create, update, delete class incharge query documents.
     * @deny (create, update, delete) If user is not authenticated.
     * @principle School ownership
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rule for the /schools/{schoolId}/promotions/{promotionId} collection.
     * @path /schools/{schoolId}/promotions/{promotionId}
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isSignedIn() && resource.data.schoolId == schoolId;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Rules for the /unique_identifiers/{identifier} collection.
     * @path /unique_identifiers/{identifier}
     */
    match /unique_identifiers/{identifier} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId != null;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}