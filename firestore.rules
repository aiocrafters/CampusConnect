/**
 * @file Firebase Security Rules for CampusConnect Firestore Database
 *
 * Core Philosophy:
 * This ruleset enforces a strict school-ownership model. All data is segmented by school ID,
 * and users must be authenticated to perform any operations. Every collection is owned by a school,
 * identified by the schoolId in the path.
 *
 * Data Structure:
 * The Firestore database is structured hierarchically, with schools at the top level:
 * /schools/{schoolId}/{collection}/{documentId}
 * Each school's data is stored under its unique schoolId, ensuring data isolation and
 * simplified security rules.
 *
 * Key Security Decisions:
 * - All operations require authentication (`isSignedIn()`).
 * - School-level access is validated using the `schoolId` present in the path.
 * - All `list` operations are secured by checking the school ID, preventing cross-school data access.
 * - Data validation is minimized in this prototyping phase, focusing on authorization.
 * - Documents in a school subcollection inherit the schoolId for simplified authorization.
 *
 * Denormalization for Authorization:
 * To simplify and optimize security rules, the `schoolId` is denormalized into every document within
 * a school's subcollections. This allows for direct access checks without requiring expensive `get()` calls.
 *
 * Example: A student document located at `/schools/{schoolId}/students/{studentId}` will also contain
 * a `schoolId` field within the document itself. This redundancy allows security rules to efficiently
 * verify that the requesting user has access to the school's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and manage school data.
     * @path /schools/{schoolId}
     * @allow (get) Authenticated user can read school data.
     * @allow (create, update, delete) Authenticated user can create, update, and delete if they own the school.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete.
     * @principle Enforces school ownership for writes, requires authentication for all operations.
     */
    match /schools/{schoolId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSchoolOwner(schoolId) {
          return request.auth.uid == schoolId;
      }
      allow get: if isSignedIn();
      allow list: if false; // Listing schools is not permitted.
      allow create: if isSignedIn() && isSchoolOwner(schoolId);
      allow update: if isSignedIn() && isSchoolOwner(schoolId);
      allow delete: if isSignedIn() && isSchoolOwner(schoolId);
    }

    /**
     * @description Allows authenticated users to manage students within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get, list) Authenticated user can read student data within the school.
     * @allow (create) Authenticated user can create a student if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a student if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage student timeline events within a school.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (get, list) Authenticated user can read timeline event data within the school.
     * @allow (create) Authenticated user can create a timeline event if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a timeline event if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage class sections within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get, list) Authenticated user can read class section data within the school.
     * @allow (create) Authenticated user can create a class section if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a class section if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage designations within a school.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (get, list) Authenticated user can read designation data within the school.
     * @allow (create) Authenticated user can create a designation.
     * @allow (update, delete) Authenticated user can update/delete a designation.
     * @deny (create, update, delete) If not signed in
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/designations/{designationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage departments within a school.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow (get, list) Authenticated user can read department data within the school.
     * @allow (create) Authenticated user can create a department.
     * @allow (update, delete) Authenticated user can update/delete a department.
     * @deny (create, update, delete) If not signed in
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/departments/{departmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage exams within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get, list) Authenticated user can read exam data within the school.
     * @allow (create) Authenticated user can create an exam if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete an exam if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/exams/{examId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage subjects within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get, list) Authenticated user can read subject data within the exam.
     * @allow (create) Authenticated user can create a subject if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a subject if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
     function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage master subjects within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (get, list) Authenticated user can read master subject data within the school.
     * @allow (create) Authenticated user can create a master subject if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a master subject if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
     function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
       allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

       /**
     * @description Allows authenticated users to manage master classes within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (get, list) Authenticated user can read master class data within the school.
     * @allow (create) Authenticated user can create a master class if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a master class if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      function isSignedIn() {
        return request.auth != null;
      }
     function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage performance records within a school.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (get, list) Authenticated user can read performance record data within the school.
     * @allow (create) Authenticated user can create a performance record if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a performance record if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }
     function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage class incharge queries within a school.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get, list) Authenticated user can read class incharge query data within the school.
     * @allow (create) Authenticated user can create a class incharge query if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a class incharge query if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Allows authenticated users to manage promotion records within a school.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (get, list) Authenticated user can read promotion data within the school.
     * @allow (create) Authenticated user can create a promotion.
     * @allow (update, delete) Authenticated user can update/delete a promotion.
     * @deny (create, update, delete) If not signed in
     * @principle Enforces school-based ownership, requires authentication for all operations.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function getSchoolId() {
        return string(request.path[6]);
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
       allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
    }

    /**
     * @description Enforces uniqueness on specific fields by checking for existing documents.
     * @path /unique_identifiers/{identifier}
     * @allow (get) Anyone can check if a unique identifier exists (read).
     * @allow (create) Only allow create if the schoolId matches.
     * @allow (update, delete) Denied to prevent modification of unique identifiers once created.
     * @deny (create, update, delete) Unauthenticated access or modification attempts.
     * @principle Enforces uniqueness for fields like phone numbers.
     */
    match /unique_identifiers/{identifier} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
   /**
     * @description Allows authenticated users to manage staff members within a school.
     * @path /schools/{schoolId}/staff/{staffId}
     * @allow (get, list) Authenticated user can read staff data within the school.
     * @allow (create) Authenticated user can create a staff member if the schoolId matches.
     * @allow (update, delete) Authenticated user can update/delete a staff member if the schoolId matches and the document exists.
     * @deny (create, update, delete) If the schoolId in the request does not match the path.
     */
    match /schools/{schoolId}/staff/{staffId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function getSchoolId() {
          return string(request.path[6]);
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
        allow update: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
        allow delete: if isSignedIn() && request.resource.data.schoolId == getSchoolId();
      }
  }
}