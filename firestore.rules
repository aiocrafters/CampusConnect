rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @param {string} document - The existing document to compare against.
     */
    function isExistingOwner(userId, document) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to the school document. Only allow authenticated users to read school.
     * @path /schools/{schoolId}
     * @allow (get) User is authenticated
     * @allow (list) User is authenticated
     * @deny (create) No one can create a root school document
     * @deny (update) No one can update a root school document
     * @deny (delete) No one can delete a root school document
     * @principle Requires authentication to read
     */
    match /schools/{schoolId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;

      /**
       * @description Grants access to the student documents under a specific school.
       * @path /schools/{schoolId}/students/{studentId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       * @principle Enforces school-based ownership for students
       */
      match /students/{studentId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;

        /**
         * @description Grants access to the student timeline event documents under a specific school and student.
         * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
         * @allow (get) User is authenticated
         * @allow (list) User is authenticated
         * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId and studentId matches path's studentId
         * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId and studentId matches path's studentId
         * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId and studentId matches path's studentId
         * @deny (create) User is not authenticated or schoolId does not match or studentId does not match
         * @deny (update) User is not authenticated or schoolId does not match or studentId does not match
         * @deny (delete) User is not authenticated or schoolId does not match or studentId does not match
         * @principle Enforces school-based ownership for student timeline events
         */
        match /timeline/{eventId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
          allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
          allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
        }

        /**
         * @description Grants access to the class incharge query documents under a specific school and student.
         * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
         * @allow (get) User is authenticated
         * @allow (list) User is authenticated
         * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
         * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
         * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
         * @deny (create) User is not authenticated or schoolId does not match
         * @deny (update) User is not authenticated or schoolId does not match
         * @deny (delete) User is not authenticated or schoolId does not match
         */
        match /classInchargeQueries/{classInchargeQueryId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
          allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
          allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId && request.resource.data.get('studentId', '') == studentId;
        }
      }

      /**
       * @description Grants access to the class section documents under a specific school.
       * @path /schools/{schoolId}/classSections/{classSectionId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       * @principle Enforces school-based ownership for class sections
       */
      match /classSections/{classSectionId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the designation documents under a specific school.
       * @path /schools/{schoolId}/designations/{designationId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /designations/{designationId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the department documents under a specific school.
       * @path /schools/{schoolId}/departments/{departmentId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /departments/{departmentId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the exam documents under a specific school.
       * @path /schools/{schoolId}/exams/{examId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       * @principle Enforces school-based ownership for exams
       */
      match /exams/{examId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;

        /**
         * @description Grants access to the subject documents under a specific school and exam.
         * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
         * @allow (get) User is authenticated
         * @allow (list) User is authenticated
         * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
         * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
         * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
         * @deny (create) User is not authenticated or schoolId does not match
         * @deny (update) User is not authenticated or schoolId does not match
         * @deny (delete) User is not authenticated or schoolId does not match
         * @principle Enforces school-based ownership for subjects within exams
         */
        match /subjects/{subjectId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
          allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
          allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        }
      }

      /**
       * @description Grants access to the master subject documents under a specific school.
       * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /masterSubjects/{masterSubjectId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the master class documents under a specific school.
       * @path /schools/{schoolId}/masterClasses/{masterClassId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /masterClasses/{masterClassId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the performance record documents under a specific school.
       * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /performanceRecords/{performanceRecordId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the promotion documents under a specific school.
       * @path /schools/{schoolId}/promotions/{promotionId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /promotions/{promotionId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }

      /**
       * @description Grants access to the staff documents under a specific school.
       * @path /schools/{schoolId}/staff/{staffId}
       * @allow (get) User is authenticated
       * @allow (list) User is authenticated
       * @allow (create) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (update) User is authenticated and the document's schoolId matches the path's schoolId
       * @allow (delete) User is authenticated and the document's schoolId matches the path's schoolId
       * @deny (create) User is not authenticated or schoolId does not match
       * @deny (update) User is not authenticated or schoolId does not match
       * @deny (delete) User is not authenticated or schoolId does not match
       */
      match /staff/{staffId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow update: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
        allow delete: if isSignedIn() && request.resource.data.get('schoolId', '') == schoolId;
      }
    }

    /**
     * @description Grants access to the unique identifier documents.
     * @path /unique_identifiers/{identifier}
     * @allow (get) User is authenticated
     * @allow (list) User is authenticated
     * @allow (create) User is authenticated
     * @allow (update) User is authenticated
     * @allow (delete) User is authenticated
     */
    match /unique_identifiers/{identifier} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}