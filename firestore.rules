/**
 * @fileoverview Firestore Security Rules for CampusConnect.
 *
 * Core Philosophy: This ruleset enforces a strict school-based multi-tenancy model.
 *   Access is primarily controlled by validating the `schoolId` in the path against the `schoolId` property in the document.
 *   All subcollections inherit schoolId for authorization independence and to avoid costly `get()` calls.
 *
 * Data Structure: All data is nested under /schools/{schoolId}, with subcollections for students, teachers, classes, etc.
 *   The `schoolId` is denormalized into all subcollection documents for efficient authorization.
 *
 * Key Security Decisions:
 *   - All read and write operations require a valid `schoolId`.
 *   - Listing collections is restricted to authorized users within the appropriate school context.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /schools collection.
     * @path /schools/{schoolId}
     * @allow (get, list): Public read access to school documents.
     * @allow (create): Only if the 'id' field in the request matches the schoolId in the path.
     * @allow (update, delete): Only if the user is the owner of the school (schoolId in the path matches the 'id' field in the document).
     * @deny (create): If the 'id' field in the request does not match the schoolId in the path.
     * @deny (update, delete): If the school document does not exist.
     * @deny (update, delete): If the user is not the owner of the school (schoolId in the path does not match the 'id' field in the document).
     * @principle Public read with owner-only writes, enforcing path consistency and document existence.
     */
    match /schools/{schoolId} {
      allow get, list: if true; // Public read

      allow create: if request.auth != null && request.resource.data.id == schoolId;
      allow update, delete: if request.auth != null && isExistingOwner(schoolId);

      // Deny write if the schoolId does not match the document's id on create.
      // Deny write if not signed in.
      // Deny write if document does not exists.
    }

    /**
     * @description Rules for the /schools/{schoolId}/students collection.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get, list): Allow read access to students in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the student (schoolId in the path matches the schoolId in the document and student exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the student document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/timeline collection.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (get, list): Allow read access to timeline events for a student in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the timeline event (schoolId in the path matches the schoolId in the document and timeline event exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the timeline event document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.studentId == studentId;
      allow update, delete: if isSignedIn() && resource != null && request.resource.data.studentId == studentId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/classSections collection.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get, list): Allow read access to class sections in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the class section (schoolId in the path matches the schoolId in the document and class section exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the class section document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/teachers collection.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (get, list): Allow read access to teachers in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the teacher (schoolId in the path matches the schoolId in the document and teacher exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the teacher document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams collection.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get, list): Allow read access to exams in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the exam (schoolId in the path matches the schoolId in the document and exam exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the exam document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterSubjects collection.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (get, list): Allow read access to master subjects in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the master subject (schoolId in the path matches the schoolId in the document and master subject exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the master subject document does not exist.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterClasses collection.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (get, list): Allow read access to master classes in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the master class (schoolId in the path matches the schoolId in the document and master class exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the master class document does not exist.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams/{examId}/subjects collection.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get, list): Allow read access to subjects in the exam.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the subject (schoolId in the path matches the schoolId in the document and subject exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the subject document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.examId == examId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && request.resource.data.examId == examId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/performanceRecords collection.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow (get, list): Allow read access to performance records for a student in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the performance record (schoolId in the path matches the schoolId in the document and performance record exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the performance record document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.studentId == studentId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && request.resource.data.studentId == studentId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/classInchargeQueries collection.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get, list): Allow read access to class incharge queries for a student in the school.
     * @allow (create): Allow create only if the schoolId in the path matches the schoolId in the document.
     * @allow (update, delete): Allow update and delete only if the user is the owner of the class incharge query (schoolId in the path matches the schoolId in the document and class incharge query exists).
     * @deny (create): If the schoolId in the path does not match the schoolId in the document.
     * @deny (update, delete): If the schoolId in the path does not match the schoolId in the document OR if the class incharge query document does not exist.
     * @principle Enforces document ownership for writes, and requires the schoolId in the path to match the schoolId in the document.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get, list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.studentId == studentId;
      allow update, delete: if isSignedIn() && isExistingOwner(schoolId) && request.resource.data.studentId == studentId;
    }

    // ---- HELPER FUNCTIONS ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(schoolId) {
      return request.auth != null && schoolId == request.auth.uid;
    }

    function isExistingOwner(schoolId) {
      return isSignedIn() && resource != null && schoolId == request.auth.uid;
    }
  }
}