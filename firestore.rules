/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict school-based ownership model for the CampusConnect application.
 * All data is nested under /schools/{schoolId}, ensuring that each school's data is isolated.
 * Each subcollection also contains a denormalized schoolId field for efficient authorization.
 *
 * Key Security Decisions:
 * - Schools have full ownership over their data.
 * - Cross-school data access is explicitly denied.
 * - Data validation is relaxed during this prototyping phase, focusing on authorization.
 * - List operations are secured to prevent unauthorized data listing across schools.
 * - The rules explicitly deny all write access if a document isn't valid or an ownership field is missing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces school-level access control.
     * @path /schools/{schoolId}
     * @allow (get, list) if true: Allows any user to read school information.
     * @allow (create, update, delete) if isSignedIn() && request.auth.uid == resource.data.adminName: Only the school administrator can modify school data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying school data.
     * @principle Enforces strict school-level access control with administrator ownership for modifications.
     */
    match /schools/{schoolId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.adminName;
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminName && resource != null;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.adminName && resource != null;
    }

    /**
     * @description Enforces school-level access control for students.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get, list) if isSignedIn() && request.auth.uid == schoolId: Allows authenticated users in the school to read student information.
     * @allow (create, update, delete) if isSignedIn() && request.auth.uid == schoolId: Allows authenticated users in the school to modify student data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying student data.
     * @principle Enforces school-level access control with authenticated users within the school having modification access.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for student timeline events.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read timeline events.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify timeline events.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying timeline events.
     * @principle Enforces school-level access control for student timeline events, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.studentId == studentId;
      allow update: if isSignedIn() && request.resource.data.studentId == studentId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.studentId == studentId && resource != null;
    }

    /**
     * @description Enforces school-level access control for class sections.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read class section information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify class section data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying class section data.
     * @principle Enforces school-level access control for class sections, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for teachers.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read teacher information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify teacher data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying teacher data.
     * @principle Enforces school-level access control for teachers, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for designations.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read designation information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify designation data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying designation data.
     * @principle Enforces school-level access control for designations, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for departments.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read department information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify department data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying department data.
     * @principle Enforces school-level access control for departments, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for exams.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read exam information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify exam data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying exam data.
     * @principle Enforces school-level access control for exams, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for master subjects.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read master subject information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify master subject data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying master subject data.
     * @principle Enforces school-level access control for master subjects, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for master classes.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read master class information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify master class data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying master class data.
     * @principle Enforces school-level access control for master classes, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for subjects.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read subject information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify subject data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying subject data.
     * @principle Enforces school-level access control for subjects, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.examId == examId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.examId == examId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.examId == examId && resource != null;
    }

    /**
     * @description Enforces school-level access control for performance records.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read performance record information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify performance record data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying performance record data.
     * @principle Enforces school-level access control for performance records, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces school-level access control for class incharge queries.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read class incharge query information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify class incharge query data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying class incharge query data.
     * @principle Enforces school-level access control for class incharge queries, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.studentId == studentId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.studentId == studentId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && request.resource.data.studentId == studentId && resource != null;
    }

    /**
     * @description Enforces school-level access control for promotion records.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (get, list) if isSignedIn(): Allows any authenticated user to read promotion record information.
     * @allow (create, update, delete) if isSignedIn(): Allows any authenticated user to modify promotion record data.
     * @deny (create, update, delete) if !isSignedIn(): Denies unauthenticated users from modifying promotion record data.
     * @principle Enforces school-level access control for promotion records, allowing modifications by any authenticated user.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Enforces uniqueness for specific fields. The document ID is the value being checked (e.g., 'phoneNumber_1234567890').
     * @path /unique_identifiers/{identifier}
     * @allow get: if false; // Prevents direct reading of identifiers.
     * @allow list: if false; // Prevents listing of all identifiers.
     * @allow create: if isSignedIn() && request.resource.data.schoolId != null; // Only allow creation by signed-in users with a valid schoolId.
     * @allow update: if false; // Updating identifiers is disallowed.
     * @allow delete: if false; // Deleting identifiers is disallowed.
     * @principle Requires signed-in user and non-null schoolId for creating unique identifiers. Direct reads, lists, updates and deletes are prohibited.
     */
    match /unique_identifiers/{identifier} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.schoolId != null;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}