rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows authenticated users to read school data, but restricts writes.
     * @path /schools/{schoolId}
     * @allow (get, list) if true
     * @allow (create) if false
     * @allow (update, delete) if false
     * @deny (create, update, delete) if true
     * @principle Allows public read access, but restricts write access to prevent unauthorized modifications.
     */
    match /schools/{schoolId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage students within a specific school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for student data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage class sections within a specific school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for class section data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage teachers within a specific school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for teacher data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage exams within a specific school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for exam data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage subjects within a specific exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for subject data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage performance records for a student.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for performance record data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to manage class incharge queries for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces school-based ownership for class incharge query data, requiring authentication for all operations.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}