/**
 * @fileoverview Firestore Security Rules for CampusConnect.
 *
 * Core Philosophy: This ruleset enforces a strict school-ownership model, where data access is primarily controlled by the school ID present in the Firestore path.
 * All data is nested under /schools/{schoolId}, ensuring logical data isolation and simplified authorization.
 *
 * Data Structure:
 * - /schools/{schoolId}: Contains school-level data.
 * - /schools/{schoolId}/students/{studentId}: Contains student data for a specific school.
 * - /schools/{schoolId}/students/{studentId}/timeline/{eventId}: Timeline events for a specific student.
 * - /schools/{schoolId}/classSections/{classSectionId}: Class section data for a specific school.
 * - /schools/{schoolId}/teachers/{teacherId}: Teacher data for a specific school.
 * - /schools/{schoolId}/exams/{examId}: Exam data for a specific school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Subject data for a specific exam.
 * - /schools/{schoolId}/performanceRecords/{performanceRecordId}: Performance records for students in a school.
 * - /schools/{schoolId}/classInchargeQueries/{classInchargeQueryId}: Queries raised by class in-charges.
 * - /schools/{schoolId}/promotions/{promotionId}: Promotion records for students.
 * - /schools/{schoolId}/masterSubjects/{masterSubjectId}: Master subjects for a school.
 * - /schools/{schoolId}/masterClasses/{masterClassId}: Master classes for a school.
 *
 * Key Security Decisions:
 * - All data is private by default.
 * - Authorization independence is achieved by denormalizing the `schoolId` into all subcollections, avoiding costly `get()` calls in security rules.
 *
 * Access Control Patterns:
 * - Ownership: Applied to schools and their subcollections, ensuring that only authenticated users associated with a school can access its data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner (schoolId).
     */
    function isOwner(schoolId) {
      return isSignedIn() && request.auth.uid == schoolId;
    }

    /**
     * @description Checks if the request is made by the existing owner (schoolId) and the resource exists.
     */
    function isExistingOwner(schoolId) {
      return isOwner(schoolId) && resource != null;
    }

    /**
     * @description Root-level read permissions are denied to prevent accidental data exposure.
     */
    match /{document=**} {
      allow read: if false;
    }

    /**
     * @description Rules for the /schools collection.
     * @path /schools/{schoolId}
     * @allow (create) User with matching schoolId can create a school document.
     * @deny (create) User with mismatched schoolId cannot create a school document.
     * @principle Enforces school ownership.
     */
    match /schools/{schoolId} {
      allow get, list: if false;
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/students collection.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) User with matching schoolId can create a student document.
     * @deny (create) User with mismatched schoolId cannot create a student document.
     * @principle Enforces school ownership for student data.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/timeline collection.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (create) User with matching schoolId can create a timeline event.
     * @deny (create) User with mismatched schoolId cannot create a timeline event.
     * @principle Enforces school ownership for student timeline data.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/classSections collection.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) User with matching schoolId can create a class section document.
     * @deny (create) User with mismatched schoolId cannot create a class section document.
     * @principle Enforces school ownership for class section data.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/teachers collection.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (create) User with matching schoolId can create a teacher document.
     * @deny (create) User with mismatched schoolId cannot create a teacher document.
     * @principle Enforces school ownership for teacher data.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams collection.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) User with matching schoolId can create an exam document.
     * @deny (create) User with mismatched schoolId cannot create an exam document.
     * @principle Enforces school ownership for exam data.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams/{examId}/subjects collection.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) User with matching schoolId can create a subject document.
     * @deny (create) User with mismatched schoolId cannot create a subject document.
     * @principle Enforces school ownership for subject data.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/performanceRecords collection.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (create) User with matching schoolId can create a performance record.
     * @deny (create) User with mismatched schoolId cannot create a performance record.
     * @principle Enforces school ownership for performance record data.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/classInchargeQueries collection.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) User with matching schoolId can create a class incharge query.
     * @deny (create) User with mismatched schoolId cannot create a class incharge query.
     * @principle Enforces school ownership for class incharge query data.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/promotions collection.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (create) User with matching schoolId can create a promotion record.
     * @deny (create) User with mismatched schoolId cannot create a promotion record.
     * @principle Enforces school ownership for promotion data.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterSubjects collection.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (create) User with matching schoolId can create a master subject record.
     * @deny (create) User with mismatched schoolId cannot create a master subject record.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
        allow get, list: if isOwner(schoolId);
        allow create: if isOwner(schoolId);
        allow update: if isExistingOwner(schoolId);
        allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterClasses collection.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (create) User with matching schoolId can create a master class record.
     * @deny (create) User with mismatched schoolId cannot create a master class record.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
        allow get, list: if isOwner(schoolId);
        allow create: if isOwner(schoolId);
        allow update: if isExistingOwner(schoolId);
        allow delete: if isExistingOwner(schoolId);
    }
  }
}