/**
 * @fileOverview Firestore Security Rules for CampusConnect.
 *
 * Core Philosophy: This ruleset enforces a strict school-based multi-tenancy model.
 * All data access is scoped to a specific school, identified by its unique schoolId.
 * Data residing outside of a school's path is considered global and may have different access rules.
 *
 * Data Structure:
 * - /schools/{schoolId}: Root collection for all school-specific data.
 * - Subcollections under /schools/{schoolId}: Contain school-specific data (students, teachers, etc.).
 *   Each document in these subcollections includes the schoolId for authorization.
 * - /unique_identifiers/{identifier}: Stores unique identifiers (e.g., phone numbers) across all schools.
 *
 * Key Security Decisions:
 * - **School Isolation**: All data access is strictly limited to the school specified in the path.
 * - **No User Listing**: Listing all users is explicitly denied.
 * - **Ambiguous Relationships**: All subcollections are owned by a school.  If a relationship
 *    is not explicitly defined, the rules default to school-only access.
 * - **Unique Identifiers**: The `unique_identifiers` collection provides a mechanism to enforce
 *   uniqueness across schools. Writes to this collection require authentication.
 *
 * Denormalization for Authorization: The `schoolId` is denormalized into every subcollection
 * document to avoid costly `get()` calls and ensure authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the provided school ID matches the requested school ID.
     * @param {string} schoolId - The school ID to compare against the requested school ID.
     * @returns {boolean} True if the school IDs match, false otherwise.
     */
    function isSchool(schoolId) {
        return request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId} collection.
     * @path /schools/{schoolId}
     * @allow (create) - Authenticated user can create a school with a matching ID (e.g., user with UID 'school123' creates /schools/school123).
     * @allow (get, list, update, delete) - Authenticated user cannot perform these actions without specific roles (currently denied).
     * @deny (create) - Unauthenticated user cannot create a school.
     * @deny (update) - Authenticated user cannot update a school if they are not the owner.
     * @principle Enforces ownership for school creation.
     */
    match /schools/{schoolId} {
      allow get, list: if false;
      allow create: if isSignedIn() && request.auth.uid == schoolId;
      allow update, delete: if false;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId} collection.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) - Authenticated user can create a student with a matching school ID.
     * @allow (get, list) - Authenticated user can read student data within their school.
     * @allow (update, delete) - Authenticated user can update/delete student data within their school.
     * @deny (create) - Unauthenticated user cannot create a student.
     * @deny (update) - Authenticated user cannot update a student if they are not the owner.
     * @principle Enforces school-based access control for student data.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId}/timeline/{eventId} collection.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (create) - Authenticated user can create a timeline event for a student with a matching school ID.
     * @allow (get, list) - Authenticated user can read timeline events within their school.
     * @allow (update, delete) - Authenticated user can update/delete timeline events within their school.
     * @deny (create) - Unauthenticated user cannot create a timeline event.
     * @deny (update) - Authenticated user cannot update a timeline event if they are not the owner.
     * @principle Enforces school-based access control for student timeline events.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/classSections/{classSectionId} collection.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) - Authenticated user can create a class section with a matching school ID.
     * @allow (get, list) - Authenticated user can read class section data within their school.
     * @allow (update, delete) - Authenticated user can update/delete class section data within their school.
     * @deny (create) - Unauthenticated user cannot create a class section.
     * @deny (update) - Authenticated user cannot update a class section if they are not the owner.
     * @principle Enforces school-based access control for class section data.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/teachers/{teacherId} collection.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (create) - Authenticated user can create a teacher with a matching school ID.
     * @allow (get, list) - Authenticated user can read teacher data within their school.
     * @allow (update, delete) - Authenticated user can update/delete teacher data within their school.
     * @deny (create) - Unauthenticated user cannot create a teacher.
     * @deny (update) - Authenticated user cannot update a teacher if they are not the owner.
     * @principle Enforces school-based access control for teacher data.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/designations/{designationId} collection.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (create) - Authenticated user can create a designation with a matching school ID.
     * @allow (get, list) - Authenticated user can read designation data within their school.
     * @allow (update, delete) - Authenticated user can update/delete designation data within their school.
     * @deny (create) - Unauthenticated user cannot create a designation.
     * @deny (update) - Authenticated user cannot update a designation if they are not the owner.
     * @principle Enforces school-based access control for designation data.
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/departments/{departmentId} collection.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow (create) - Authenticated user can create a department with a matching school ID.
     * @allow (get, list) - Authenticated user can read department data within their school.
     * @allow (update, delete) - Authenticated user can update/delete department data within their school.
     * @deny (create) - Unauthenticated user cannot create a department.
     * @deny (update) - Authenticated user cannot update a department if they are not the owner.
     * @principle Enforces school-based access control for department data.
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/exams/{examId} collection.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) - Authenticated user can create an exam with a matching school ID.
     * @allow (get, list) - Authenticated user can read exam data within their school.
     * @allow (update, delete) - Authenticated user can update/delete exam data within their school.
     * @deny (create) - Unauthenticated user cannot create an exam.
     * @deny (update) - Authenticated user cannot update an exam if they are not the owner.
     * @principle Enforces school-based access control for exam data.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/masterSubjects/{masterSubjectId} collection.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (create) - Authenticated user can create a master subject with a matching school ID.
     * @allow (get, list) - Authenticated user can read master subject data within their school.
     * @allow (update, delete) - Authenticated user can update/delete master subject data within their school.
     * @deny (create) - Unauthenticated user cannot create a master subject.
     * @deny (update) - Authenticated user cannot update a master subject if they are not the owner.
     * @principle Enforces school-based access control for master subject data.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/masterClasses/{masterClassId} collection.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (create) - Authenticated user can create a master class with a matching school ID.
     * @allow (get, list) - Authenticated user can read master class data within their school.
     * @allow (update, delete) - Authenticated user can update/delete master class data within their school.
     * @deny (create) - Unauthenticated user cannot create a master class.
     * @deny (update) - Authenticated user cannot update a master class if they are not the owner.
     * @principle Enforces school-based access control for master class data.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/exams/{examId}/subjects/{subjectId} collection.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) - Authenticated user can create a subject with a matching school ID.
     * @allow (get, list) - Authenticated user can read subject data within their school.
     * @allow (update, delete) - Authenticated user can update/delete subject data within their school.
     * @deny (create) - Unauthenticated user cannot create a subject.
     * @deny (update) - Authenticated user cannot update a subject if they are not the owner.
     * @principle Enforces school-based access control for subject data.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/performanceRecords/{performanceRecordId} collection.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (create) - Authenticated user can create a performance record with a matching school ID.
     * @allow (get, list) - Authenticated user can read performance record data within their school.
     * @allow (update, delete) - Authenticated user can update/delete performance record data within their school.
     * @deny (create) - Unauthenticated user cannot create a performance record.
     * @deny (update) - Authenticated user cannot update a performance record if they are not the owner.
     * @principle Enforces school-based access control for performance record data.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} collection.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) - Authenticated user can create a class incharge query with a matching school ID.
     * @allow (get, list) - Authenticated user can read class incharge query data within their school.
     * @allow (update, delete) - Authenticated user can update/delete class incharge query data within their school.
     * @deny (create) - Unauthenticated user cannot create a class incharge query.
     * @deny (update) - Authenticated user cannot update a class incharge query if they are not the owner.
     * @principle Enforces school-based access control for class incharge query data.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /schools/{schoolId}/promotions/{promotionId} collection.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (create) - Authenticated user can create a promotion record with a matching school ID.
     * @allow (get, list) - Authenticated user can read promotion record data within their school.
     * @allow (update, delete) - Authenticated user can update/delete promotion record data within their school.
     * @deny (create) - Unauthenticated user cannot create a promotion record.
     * @deny (update) - Authenticated user cannot update a promotion record if they are not the owner.
     * @principle Enforces school-based access control for promotion record data.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && request.resource.data.schoolId == schoolId;// && request.auth.uid == resource.data.creatorId;
      allow delete: if isSignedIn() && request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Rule for the /unique_identifiers/{identifier} collection.
     * @path /unique_identifiers/{identifier}
     * @allow (create) - Authenticated user can create a unique identifier with a matching school ID.
     * @allow (get) - Any authenticated user can attempt to get the identifier
     * @allow (list) - No one can list identifiers.
     * @allow (update, delete) - No one can update or delete identifiers.
     * @deny (create) - Unauthenticated user cannot create a unique identifier.
     * @deny (update) - No one can update.
     * @principle Enforces ownership-based uniqueness and prevents unauthorized modification.
     */
    match /unique_identifiers/{identifier} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }
  }
}