/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict school-based ownership model for the CampusConnect application.
 * All data is nested under /schools/{schoolId} and its subcollections.
 *
 * Data Structure:
 * - /schools/{schoolId}: Contains school profile information. Only authenticated users (school admins) can manage their school's data.
 * - /schools/{schoolId}/students/{studentId}: Contains student information. School admins can manage students within their school.
 * - /schools/{schoolId}/classSections/{classSectionId}: Contains class section information. School admins can manage class sections within their school.
 * - /schools/{schoolId}/teachers/{teacherId}: Contains teacher information. School admins can manage teachers within their school.
 * - /schools/{schoolId}/exams/{examId}: Contains exam information. School admins can manage exams within their school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Contains subject information for an exam. School admins can manage subjects within their school.
 * - /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}: Contains student performance records. School admins can manage performance records within their school.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: Contains queries raised by class in-charges. School admins can manage queries within their school.
 *
 * Key Security Decisions:
 * - All data access is restricted to authenticated users. Anonymous access is explicitly disallowed unless configured otherwise.
 * - School admins can manage all data within their school's scope, as defined by the /schools/{schoolId} path.
 * - The `schoolId` is denormalized into subcollection documents to allow for simple and efficient authorization checks.
 * - No user listing is allowed at any level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to school profile data.
     * @path /schools/{schoolId}
     * @allow (create) - Authenticated user can create a school profile if the schoolId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner (schoolId matches their UID).
     * @deny (create) - Unauthenticated user cannot create a school profile.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a school profile.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if false;
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to student data within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) - Authenticated user can create a student profile within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a student profile.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a student profile.
     * @principle Enforces school-based ownership for student data.
     */
    match /schools/{schoolId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to class section data within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) - Authenticated user can create a class section within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a class section.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a class section.
     * @principle Enforces school-based ownership for class section data.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to teacher data within a school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (create) - Authenticated user can create a teacher profile within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a teacher profile.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a teacher profile.
     * @principle Enforces school-based ownership for teacher data.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to exam data within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) - Authenticated user can create an exam within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create an exam.
     * @deny (update, delete) - Unauthenticated user cannot update or delete an exam.
     * @principle Enforces school-based ownership for exam data.
     */
    match /schools/{schoolId}/exams/{examId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to subject data within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) - Authenticated user can create a subject within an exam in their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a subject.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a subject.
     * @principle Enforces school-based ownership for subject data.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to performance record data for a student.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow (create) - Authenticated user can create a performance record for a student within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a performance record.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a performance record.
     * @principle Enforces school-based ownership for performance record data.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Manages access to class incharge query data for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) - Authenticated user can create a class incharge query for a student within their school.
     * @allow (get, list, update, delete) - Authenticated user can only access if they are the owner of the school.
     * @deny (create) - Unauthenticated user cannot create a class incharge query.
     * @deny (update, delete) - Unauthenticated user cannot update or delete a class incharge query.
     * @principle Enforces school-based ownership for class incharge query data.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return isSignedIn() && request.auth.uid == schoolId;
      }

      function isExistingOwner(schoolId) {
          return isOwner(schoolId) && resource != null;
      }

      allow get, list: if isOwner(schoolId);
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }
  }
}