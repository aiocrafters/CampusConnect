/**
 * @description This ruleset enforces a strict school-based ownership model for the CampusConnect application.
 * All data is nested under /schools/{schoolId}, ensuring that each school's data is isolated.
 * Authorization relies on verifying the schoolId in the path against the user's authentication.
 * Data shape is not strictly enforced to allow for rapid prototyping and iteration.
 * @dataStructure
 * - /schools/{schoolId}: Root collection for each school.
 * - /schools/{schoolId}/students/{studentId}: Student data for a school.
 * - /schools/{schoolId}/students/{studentId}/timeline/{eventId}: Timeline events for a student.
 * - /schools/{schoolId}/classSections/{classSectionId}: Class section data for a school.
 * - /schools/{schoolId}/teachers/{teacherId}: Teacher data for a school.
 * - /schools/{schoolId}/exams/{examId}: Exam data for a school.
 * - /schools/{schoolId}/masterSubjects/{masterSubjectId}: Master subject data for a school.
 * - /schools/{schoolId}/masterClasses/{masterClassId}: Master class data for a school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Subject data for an exam.
 * - /schools/{schoolId}/performanceRecords/{performanceRecordId}: Performance records for students in a school.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: Class incharge queries for a student.
 * - /schools/{schoolId}/promotions/{promotionId}: Promotion records for students in a school.
 * @keySecurityDecisions
 * - All read and write operations require the user to be authenticated.
 * - Write operations are restricted to authenticated users associated with the school.
 * - List operations are restricted to authenticated users associated with the school.
 * - Data validation is minimal to allow for flexible data shapes during prototyping.
 * - No global admin roles are defined in this initial ruleset.
 * @denormalizationForAuthorization
 * - The `schoolId` is denormalized into every subcollection document to avoid costly `get()` calls in security rules.
 * @structuralSegregation
 * - Each entity type has its own dedicated collection, simplifying security rules and preventing accidental data exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(schoolId) {
      return isSignedIn() && request.auth.uid == schoolId;
    }

    function isExistingOwner(schoolId) {
      return isOwner(schoolId) && resource != null;
    }

    /**
     * @description Allows access to school documents only for authenticated users with the correct schoolId.
     * @path /schools/{schoolId}
     * @allow (get) Signed-in user can read school data.
     * @deny (create) Non-signed-in user cannot create a school.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to student documents within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (get) Signed-in user can read student data.
     * @deny (create) Non-signed-in user cannot create a student.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

        /**
         * @description Allows access to student timeline events within a school.
         * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
         * @allow (get) Signed-in user can read timeline event data.
         * @deny (create) Non-signed-in user cannot create a timeline event.
         * @principle Enforces document ownership for writes.
         */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
          allow get: if isSignedIn();
          allow list: if isSignedIn() && isOwner(schoolId);
          allow create: if isSignedIn() && request.resource.data.studentId == studentId;
          allow update: if isExistingOwner(schoolId) && request.resource.data.studentId == resource.data.studentId;
          allow delete: if isExistingOwner(schoolId);
        }

    /**
     * @description Allows access to class section documents within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (get) Signed-in user can read class section data.
     * @deny (create) Non-signed-in user cannot create a class section.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to teacher documents within a school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow (get) Signed-in user can read teacher data.
     * @deny (create) Non-signed-in user cannot create a teacher.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to exam documents within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (get) Signed-in user can read exam data.
     * @deny (create) Non-signed-in user cannot create an exam.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to subject documents within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (get) Signed-in user can read subject data.
     * @deny (create) Non-signed-in user cannot create a subject.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.examId == examId;
      allow update: if isExistingOwner(schoolId) && resource.data.examId == request.resource.data.examId;
      allow delete: if isExistingOwner(schoolId);
    }

        /**
         * @description Allows access to master subject documents within a school.
         * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
         * @allow (get) Signed-in user can read master subject data.
         * @deny (create) Non-signed-in user cannot create a master subject.
         * @principle Enforces document ownership for writes.
         */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

        /**
         * @description Allows access to master class documents within a school.
         * @path /schools/{schoolId}/masterClasses/{masterClassId}
         * @allow (get) Signed-in user can read master class data.
         * @deny (create) Non-signed-in user cannot create a master class.
         * @principle Enforces document ownership for writes.
         */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to performance record documents within a school.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (get) Signed-in user can read performance record data.
     * @deny (create) Non-signed-in user cannot create a performance record.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to class incharge query documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (get) Signed-in user can read class incharge query data.
     * @deny (create) Non-signed-in user cannot create a class incharge query.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.studentId == studentId;
      allow update: if isExistingOwner(schoolId) && request.resource.data.studentId == resource.data.studentId;
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Allows access to promotion documents within a school.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (get) Signed-in user can read promotion data.
     * @deny (create) Non-signed-in user cannot create a promotion.
     * @principle Enforces document ownership for writes.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(schoolId);
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == request.resource.data.schoolId;
      allow delete: if isExistingOwner(schoolId);
    }
  }
}