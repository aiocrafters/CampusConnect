/**
 * @fileoverview Firestore Security Rules for CampusConnect.
 *
 * Core Philosophy: This ruleset enforces a strict school-ownership model, ensuring data isolation between schools.
 * All data is nested under /schools/{schoolId}, and access is granted based on the authenticated user's association
 * with that school. All writes must be performed by an authenticated user, and ownership checks are enforced
 * on data creation, modification, and deletion. Data shape is not strictly validated during this prototyping phase.
 *
 * Data Structure:
 * - /schools/{schoolId}: Contains school-level data.
 * - /schools/{schoolId}/students/{studentId}: Contains student data for a specific school.
 * - /schools/{schoolId}/classSections/{classSectionId}: Contains class section data for a specific school.
 * - /schools/{schoolId}/staff/{staffId}: Contains staff data for a specific school.
 * - /schools/{schoolId}/designations/{designationId}: Contains designation data for a specific school.
 * - /schools/{schoolId}/departments/{departmentId}: Contains department data for a specific school.
 * - /schools/{schoolId}/exams/{examId}: Contains exam data for a specific school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Contains subject data for a specific exam.
 * - /schools/{schoolId}/performanceRecords/{performanceRecordId}: Contains student performance records for a school.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: Contains queries raised by class in-charges.
 * - /schools/{schoolId}/promotions/{promotionId}: Contains promotion records for a school.
 * - /unique_identifiers/{identifier}: Enforces uniqueness for fields like phone numbers across all schools.
 *
 * Key Security Decisions:
 * - Strict School Ownership: All data access is restricted to authenticated users associated with the school
 *   owning the data. This is enforced using the `schoolId` parameter in the path and the `request.auth.uid`.
 * - No Public Listing: Listing of collections containing potentially private user data (e.g., students, staff)
 *   is restricted to authenticated users associated with the school.
 * - Self-Creation Allowed for Schools: A user can create a school document if the schoolId matches their UID.
 * - Denormalization for Authorization: The `schoolId` is denormalized into subcollection documents to avoid
 *   costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() == true if request.auth != null
     * @principle Ensures only authenticated users can access the data.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} - True if the user IDs match, false otherwise.
     * @example isOwner('user123') == true if request.auth.uid == 'user123'
     * @principle Enforces document ownership for writes.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} - True if the user IDs match and the resource exists, false otherwise.
     * @example isExistingOwner('user123') == true if request.auth.uid == 'user123' && resource != null
     * @principle Enforces document ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants or denies access to school documents.
     * @path /schools/{schoolId}
     * @allow (create) if isOwner(schoolId)
     * @deny (create) if !isSignedIn()
     * @allow (get) if isSignedIn()
     * @deny (get) if false
     * @allow (list) if false
     * @deny (list) if true
     * @allow (update) if isExistingOwner(schoolId)
     * @deny (update) if !isExistingOwner(schoolId)
     * @allow (delete) if isExistingOwner(schoolId)
     * @deny (delete) if !isExistingOwner(schoolId)
     * @principle Enforces school ownership for writes and requires authentication for reads.
     */
    match /schools/{schoolId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Grants or denies access to student documents within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     * @principle Enforces school-level ownership for student data.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to student timeline event documents.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (create) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn()
     * @deny (update) if !isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Enforces authentication for access to student timeline events.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants or denies access to class section documents within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     * @principle Enforces school-level ownership for class section data.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to designation documents within a school.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to department documents within a school.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to exam documents within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     * @principle Enforces school-level ownership for exam data.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to masterSubject documents within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to masterClass documents within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to subject documents within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     * @principle Enforces school-level ownership for subject data.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to performance record documents within a school.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to class in-charge query documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

     /**
      * @description Grants or denies access to staff documents within a school.
      * @path /schools/{schoolId}/staff/{staffId}
      * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
      * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
      * @allow (get) if isSignedIn()
      * @deny (get) if !isSignedIn()
      * @allow (list) if isSignedIn()
      * @deny (list) if !isSignedIn()
      * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
      * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
      * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
      * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
      * @principle Enforces school-level ownership for staff data.
      */
     match /schools/{schoolId}/staff/{staffId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn();
       allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
       allow update: if isSignedIn() && resource.data.schoolId == schoolId;
       allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
     }

    /**
     * @description Grants or denies access to promotion documents within a school.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId == schoolId
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId != schoolId
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (update) if !isSignedIn() || resource.data.schoolId != schoolId
     * @allow (delete) if isSignedIn() && resource.data.schoolId == schoolId
     * @deny (delete) if !isSignedIn() || resource.data.schoolId != schoolId
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId == schoolId;
      allow update: if isSignedIn() && resource.data.schoolId == schoolId;
      allow delete: if isSignedIn() && resource.data.schoolId == schoolId && resource != null;
    }

    /**
     * @description Grants or denies access to unique identifier documents.
     * @path /unique_identifiers/{identifier}
     * @allow (create) if isSignedIn() && request.resource.data.schoolId != null;
     * @deny (create) if !isSignedIn() || request.resource.data.schoolId == null;
     * @allow (get) if isSignedIn()
     * @deny (get) if !isSignedIn()
     * @allow (list) if isSignedIn()
     * @deny (list) if !isSignedIn()
     * @allow (update) if isSignedIn() && resource.data.schoolId != null;
     * @deny (update) if !isSignedIn() || resource.data.schoolId == null;
     * @allow (delete) if isSignedIn() && resource.data.schoolId != null;
     * @deny (delete) if !isSignedIn() || resource.data.schoolId == null;
     * @principle Enforces schoolId presence for unique identifiers.
     */
    match /unique_identifiers/{identifier} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.schoolId != null;
      allow update: if isSignedIn() && resource.data.schoolId != null;
      allow delete: if isSignedIn() && resource.data.schoolId != null && resource != null;
    }
  }
}