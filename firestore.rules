/**
 * @fileoverview Firestore Security Rules for CampusConnect.
 *
 * Core Philosophy:
 * This ruleset enforces a strict school-ownership model. All data is segmented by school ID,
 * ensuring that users can only access data belonging to their school.
 *
 * Data Structure:
 * All data is nested under /schools/{schoolId}, which acts as the root for all school-specific data.
 * This design ensures clear ownership and prevents cross-school data access.
 *
 * Key Security Decisions:
 * - Only authenticated users can access data.
 * - Every document includes schoolId, and all requests must match the schoolId in the path.
 * - The 'schools' collection is writeable only by an authenticated user with a matching id.
 * - Listing of the 'schools' collection is denied.
 *
 * Denormalization for Authorization:
 * - Every subcollection document includes the schoolId, enabling efficient authorization checks without
 *   requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Validates the authenticated user
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Validates that the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Validates ownership
     */
    function isOwner(schoolId) {
      return request.auth.uid == schoolId;
    }

    /**
     * @description Validates that the authenticated user's UID matches the schoolId and that the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Validates ownership and resource existence
     */
    function isExistingOwner(schoolId) {
      return isOwner(schoolId) && exists(resource);
    }

    /**
     * @description Rules for the schools collection.
     * @path /schools/{schoolId}
     * @allow Signed-in user (create)
     * @deny Unsigned-in user (create)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == schoolId;
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the students collection within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the timeline collection within a student.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
     match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the classSections collection within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

     /**
      * @description Rules for the staff collection within a school.
      * @path /schools/{schoolId}/staff/{staffId}
      * @allow School admin (create, update, delete)
      * @deny Non-school admin (create, update, delete)
      * @principle Enforces document ownership for writes
      */
     match /schools/{schoolId}/staff/{staffId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the designations collection within a school.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the departments collection within a school.
     * @path /schools/{schoolId}/departments/{departmentId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the exams collection within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }
    
    /**
     * @description Rules for the masterSubjects collection within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
     match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the masterClasses collection within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
     match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the subjects collection within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the performanceRecords collection within a school.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the classInchargeQueries collection within a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the promotions collection within a school.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow School admin (create, update, delete)
     * @deny Non-school admin (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(schoolId);
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the unique_identifiers collection.
     * @path /unique_identifiers/{identifier}
     * @allow Signed-in user (create, update, delete)
     * @deny Unsigned-in user (create, update, delete)
     * @principle Enforces document ownership for writes
     */
    match /unique_identifiers/{identifier} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}