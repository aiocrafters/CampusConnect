/**
 * @file Overview
 * This ruleset enforces a strict school-based data isolation model for the CampusConnect application.
 * All data is nested under /schools/{schoolId}, ensuring that each school's data is completely separate.
 *
 * Data Structure:
 * - /schools/{schoolId}: Root document for a school.
 * - /schools/{schoolId}/students/{studentId}: Student documents belonging to a school.
 * - /schools/{schoolId}/classSections/{classSectionId}: ClassSection documents belonging to a school.
 * - /schools/{schoolId}/teachers/{teacherId}: Teacher documents belonging to a school.
 * - /schools/{schoolId}/exams/{examId}: Exam documents belonging to a school.
 * - /schools/{schoolId}/masterSubjects/{masterSubjectId}: MasterSubject documents belonging to a school.
 * - /schools/{schoolId}/masterClasses/{masterClassId}: MasterClass documents belonging to a school.
 * - /schools/{schoolId}/exams/{examId}/subjects/{subjectId}: Subject documents belonging to an exam within a school.
 * - /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}: PerformanceRecord documents for a student within a school.
 * - /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}: ClassInchargeQuery documents for a student within a school.
 *
 * Key Security Decisions:
 * - Access to all data is restricted to authenticated users. Further access control needs to be configured depending on business logic.
 * - All writes require authentication.
 * - Listing operations are generally allowed within a school's subcollections, but can be disabled where specifically noted.
 * - Data validation is minimal in this prototyping phase, focusing on relational integrity and path consistency.
 *
 * Denormalization for Authorization:
 * - The 'schoolId' is denormalized into every subcollection document to enable authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to school documents. Currently, only authenticated users can read the data.  Further write access control needs to be configured.
     * @path /schools/{schoolId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to student documents within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/students/{studentId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to class section documents within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to teacher documents within a school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to exam documents within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/exams/{examId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to subject documents within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Grants access to master subject documents within a school.
      * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
      * @allow get, list: if isSignedIn();
      * @allow create: if false;
      * @allow update: if false;
      * @allow delete: if false;
      * @principle Path-based ownership.
      */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to master class documents within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to performance record documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Grants access to class in-charge query documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow get, list: if isSignedIn();
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Path-based ownership.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}