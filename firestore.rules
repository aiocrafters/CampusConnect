rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to school documents.
     * @path /schools/{schoolId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null;
     * @allow update, delete: if isOwner(schoolId);
     * @deny create: if false;
     * @principle Allows any signed in user to create a school, and only the owner to update or delete. Public read.
     */
    match /schools/{schoolId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(schoolId) {
        return request.auth.uid == resource.data.ownerId;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.ownerId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isOwner(schoolId);
    }

    /**
     * @description Allows access to student documents within a school.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for students.
     */
    match /schools/{schoolId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to class section documents within a school.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for class sections.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to teacher documents within a school.
     * @path /schools/{schoolId}/teachers/{teacherId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for teachers.
     */
    match /schools/{schoolId}/teachers/{teacherId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to exam documents within a school.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for exams.
     */
    match /schools/{schoolId}/exams/{examId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to master subject documents within a school.
     * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @principle Enforces school-based ownership for master subjects.
     */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
    }

    /**
     * @description Allows access to master class documents within a school.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @principle Enforces school-based ownership for master classes.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
    }

    /**
     * @description Allows access to subject documents within an exam.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for subjects within an exam.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to performance record documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for performance records.
     */
    match /schools/{schoolId}/students/{studentId}/performanceRecords/{performanceRecordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }

    /**
     * @description Allows access to class in-charge query documents for a student.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow get, list: if isSchoolOwner(schoolId);
     * @allow create: if isSchoolOwner(schoolId);
     * @allow update, delete: if isSchoolOwner(schoolId);
     * @deny create: if request.resource.data.schoolId != schoolId;
     * @principle Enforces school-based ownership for class in-charge queries.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSchoolOwner(schoolId) {
        return request.auth.uid == get(/databases/$(database)/documents/schools/$(schoolId)).data.ownerId;
      }

      allow get, list: if isSchoolOwner(schoolId);
      allow create: if isSchoolOwner(schoolId);
      allow update, delete: if isSchoolOwner(schoolId);
      allow create: if request.resource.data.schoolId == schoolId;
    }
  }
}