/**
 * @file Firebase Security Rules for CampusConnect Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict school-ownership model. All data is segregated by school ID and access is granted to authenticated users based on their association with a specific school.
 *
 * Data Structure:
 * The database is structured hierarchically under the `/schools/{schoolId}` path. Each school's data (students, staff, classes, etc.) is stored in subcollections under its respective school ID.
 *
 * Key Security Decisions:
 * - Listing of all schools is forbidden to prevent unauthorized discovery of school IDs.
 * - All writes to school-owned data require the user to be authenticated and associated with the target school.
 * - Data consistency is enforced by validating that the schoolId in the path matches the schoolId in the document data on creation.
 * - Immutability of the `schoolId` field is enforced on updates to prevent moving data between schools.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the school.
    function isOwner(schoolId) {
      return isSignedIn() && request.auth.uid == schoolId;
    }

    // Helper function to check if the user is the existing owner of the school (for update/delete).
    function isExistingOwner(schoolId) {
      return isOwner(schoolId) && resource != null;
    }

    /**
     * @description Rules for the /schools collection. Only allows authenticated users to create a school with their UID.
     * @path /schools/{schoolId}
     * @allow (create) User with UID 'school_abc' can create a school document with ID 'school_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a school document with ID 'school_abc'.
     * @principle Enforces self-creation of school documents and prevents unauthorized creation.
     */
    match /schools/{schoolId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == schoolId;
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/students collection. Only allows creating a student under a school with a matching schoolId.
     * @path /schools/{schoolId}/students/{studentId}
     * @allow (create) User with UID 'school_abc' can create a student under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a student under school 'school_abc'.
     * @principle Enforces school-ownership for student creation and validates data consistency.
     */
    match /schools/{schoolId}/students/{studentId} {
      allow get: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId && request.resource.data.id == studentId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId && resource.data.id == studentId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/timeline collection.
     * @path /schools/{schoolId}/students/{studentId}/timeline/{eventId}
     * @allow (create) User with UID 'school_abc' can create a timeline event under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a timeline event under school 'school_abc'.
     * @principle Enforces school-ownership for timeline event creation and validates data consistency.
     */
    match /schools/{schoolId}/students/{studentId}/timeline/{eventId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.studentId == studentId;
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/classSections collection. Only allows creating a classSection under a school with a matching schoolId.
     * @path /schools/{schoolId}/classSections/{classSectionId}
     * @allow (create) User with UID 'school_abc' can create a classSection under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a classSection under school 'school_abc'.
     * @principle Enforces school-ownership for classSection creation and validates data consistency.
     */
    match /schools/{schoolId}/classSections/{classSectionId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/designations collection. Only allows creating a designation under a school with a matching schoolId.
     * @path /schools/{schoolId}/designations/{designationId}
     * @allow (create) User with UID 'school_abc' can create a designation under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a designation under school 'school_abc'.
     * @principle Enforces school-ownership for designation creation and validates data consistency.
     */
    match /schools/{schoolId}/designations/{designationId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

     /**
      * @description Rules for the /schools/{schoolId}/departments collection. Only allows creating a department under a school with a matching schoolId.
      * @path /schools/{schoolId}/departments/{departmentId}
      * @allow (create) User with UID 'school_abc' can create a department under school 'school_abc' with schoolId = 'school_abc'.
      * @deny (create) User with UID 'school_xyz' cannot create a department under school 'school_abc'.
      * @principle Enforces school-ownership for department creation and validates data consistency.
      */
    match /schools/{schoolId}/departments/{departmentId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams collection. Only allows creating an exam under a school with a matching schoolId.
     * @path /schools/{schoolId}/exams/{examId}
     * @allow (create) User with UID 'school_abc' can create an exam under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create an exam under school 'school_abc'.
     * @principle Enforces school-ownership for exam creation and validates data consistency.
     */
    match /schools/{schoolId}/exams/{examId} {
      allow get: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/exams/{examId}/subjects collection.
     * @path /schools/{schoolId}/exams/{examId}/subjects/{subjectId}
     * @allow (create) User with UID 'school_abc' can create a subject under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a subject under school 'school_abc'.
     * @principle Enforces school-ownership for subject creation and validates data consistency.
     */
    match /schools/{schoolId}/exams/{examId}/subjects/{subjectId} {
      allow get: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }
     /**
      * @description Rules for the /schools/{schoolId}/masterSubjects collection. Only allows creating a masterSubject under a school with a matching schoolId.
      * @path /schools/{schoolId}/masterSubjects/{masterSubjectId}
      * @allow (create) User with UID 'school_abc' can create a masterSubject under school 'school_abc' with schoolId = 'school_abc'.
      * @deny (create) User with UID 'school_xyz' cannot create a masterSubject under school 'school_abc'.
      * @principle Enforces school-ownership for masterSubject creation and validates data consistency.
      */
    match /schools/{schoolId}/masterSubjects/{masterSubjectId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/masterClasses collection. Only allows creating a masterClass under a school with a matching schoolId.
     * @path /schools/{schoolId}/masterClasses/{masterClassId}
     * @allow (create) User with UID 'school_abc' can create a masterClass under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a masterClass under school 'school_abc'.
     * @principle Enforces school-ownership for masterClass creation and validates data consistency.
     */
    match /schools/{schoolId}/masterClasses/{masterClassId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/performanceRecords collection.
     * @path /schools/{schoolId}/performanceRecords/{performanceRecordId}
     * @allow (create) User with UID 'school_abc' can create a performanceRecord under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a performanceRecord under school 'school_abc'.
     * @principle Enforces school-ownership for performanceRecord creation and validates data consistency.
     */
    match /schools/{schoolId}/performanceRecords/{performanceRecordId} {
      allow get: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }

    /**
     * @description Rules for the /schools/{schoolId}/students/{studentId}/classInchargeQueries collection.
     * @path /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId}
     * @allow (create) User with UID 'school_abc' can create a classInchargeQuery under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a classInchargeQuery under school 'school_abc'.
     * @principle Enforces school-ownership for classInchargeQuery creation and validates data consistency.
     */
    match /schools/{schoolId}/students/{studentId}/classInchargeQueries/{classInchargeQueryId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.studentId == studentId;
      allow update: if isExistingOwner(schoolId);
      allow delete: if isExistingOwner(schoolId);
    }

    /**
     * @description Rules for the /schools/{schoolId}/promotions collection. Only allows creating a promotion under a school with a matching schoolId.
     * @path /schools/{schoolId}/promotions/{promotionId}
     * @allow (create) User with UID 'school_abc' can create a promotion under school 'school_abc' with schoolId = 'school_abc'.
     * @deny (create) User with UID 'school_xyz' cannot create a promotion under school 'school_abc'.
     */
    match /schools/{schoolId}/promotions/{promotionId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }
    /**
     * @description Rules for the /unique_identifiers collection.
     * @path /unique_identifiers/{identifier}
     */
    match /unique_identifiers/{identifier} {
      allow get: if false;
      allow list: if false;
      allow create: if request.resource.data.schoolId == schoolId();
      allow update: if false;
      allow delete: if false;

      function schoolId() {
        return request.resource.data.schoolId;
      }
    }

    /**
     * @description Rules for the /schools/{schoolId}/staff collection.
     * @path /schools/{schoolId}/staff/{staffId}
     */
    match /schools/{schoolId}/staff/{staffId} {
      allow get: if isExistingOwner(schoolId);
      allow list: if isOwner(schoolId);
      allow create: if isOwner(schoolId) && request.resource.data.schoolId == schoolId;
      allow update: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
      allow delete: if isExistingOwner(schoolId) && resource.data.schoolId == schoolId;
    }
  }
}